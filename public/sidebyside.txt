players[data["bulletId"]].score += data["socrepluse"];
            if (data["bulletId"] === playerId) {
              score = players[data["bulletId"]].score;
            }
            let tonextlevel =
              levels["level" + level] - levels["level" + (level - 1)];
            progress =
              (score - levels["level" + (level - 1)]) /
              (levels["level" + level] - levels["level" + (level - 1)]);
            if (score / levels["level" + level] >= 1) {
              // Add transition property

              let tankdata = tankmeta[__type__];
              console.log(level >= tankdata["upgradeLevel"]);
              if (level === tankdata["upgradeLevel"]) {
                var tankstiles = document.getElementById("tanktiles");
                tankstiles.style.display = "block";
                tankstiles.style.left = 0;
                tankstiles.style.animation = "2s 1 move";
                var upgrade = tankdata["upgrades"];

                for (let i = 0; i < Object.keys(upgrade).length; i++) {
                  var img__ = document.createElement("img");
                  var tileImg = Object.values(upgrade)[i];
                  tankstiles.appendChild(img__);
                  console.log(tileImg);

                  img__.src = "tanktiles/" + tileImg + ".png";
                  img__.style =
                    "width: 6vw; height: 6vw; margin: 10px; z-index: 100;";

                  img__.addEventListener("click", function (event) {
                    event.stopPropagation();
                    tankstiles.style.display = "none";
                    __type__ = Object.keys(upgrade)[i];
                    players[playerId].type = __type__;
                    tankdata = tankmeta[__type__];
                    var tankdatacannon__ = tankdata["cannons"];
                    playerSize *= tankdata["size-m"];
                    playerSpeed *= tankdata["speed-m"];
                    bullet_damage *= tankdata["damage-m"];
                    playerReheal *= tankdata["regen-m"];
                    bodyDamage *= tankdata["BodyDamage-m"];
                    maxhealth *= tankdata["health-m"];
                    if (playerHealth > maxhealth) {
                      playerHealth = maxhealth;
                    }

                    socket.send(
                      JSON.stringify({
                        type: "typeChange",
                        data: {
                          id: playerId,
                          x: playerX,
                          y: playerY,
                          health: playerHealth,
                          speed: playerSpeed,
                          size: playerSize,
                          bodyDamage: bodyDamage,
                          cannonW: cannonWidth,
                          cannonH: 0,
                          __type__: __type__,
                          cannon_angle: getCannonAngle(),
                          score: score,
                          username: username,
                          level: level,
                          state: state,
                          statecycle: statecycle,
                          playerHealTime: playerHealTime,
                          maxhealth: maxhealth,
                          playerReheal: playerReheal,
                          FOV: FOV,
                          MouseX: MouseX_,
                          MouseY: MouseY_,
                          screenWidth: canvas.width,
                          screenHeight: canvas.height,
                        },
                      })
                    );

                    setTimeout(() => {
                      cannonWidth = [];
                      cannonFireData = [];
                      console.log(Object.keys(tankdatacannon__).length);
                      for (
                        let i = 0;
                        i < Object.keys(tankdatacannon__).length;
                        i++
                      ) {
                        cannonWidth.push(0);
                        cannonFireData.push(true)
                      }
                      console.log(cannonWidth);
                    }, 100);
                  });
                }
              }
              level += 1;
              let tonextlevel =
                levels["level" + level] - levels["level" + (level - 1)];
              progress =
                (score - levels["level" + (level - 1)]) /
                (levels["level" + level] - levels["level" + (level - 1)]);
              playerSize += playerSize * 0.005;
              while (score / levels["level" + level] >= 1) {
                level += 1;
                playerSize += playerSize * 0.005;
                progress =
                  (score - levels["level" + (level - 1)]) /
                  (levels["level" + level] - levels["level" + (level - 1)]);
              }
            }